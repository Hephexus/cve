#!/usr/bin/env python3
"""
Remote Controller for CVE-2025-6021: Android SSH LPE PoC.
This script reads its configuration from config.json and triggers the PoC on the target device.
It can be extended to use SSH to remotely trigger the exploit, or simply run the local PoC script.
"""

import argparse
import json
import os
import subprocess
import sys

def load_config():
    config_path = os.path.join(os.path.dirname(__file__), 'config.json')
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"[ERROR] Could not load config: {e}", file=sys.stderr)
        sys.exit(1)

def trigger_poc():
    poc_script = os.path.join(os.path.dirname(__file__), 'poc.sh')
    if not os.path.exists(poc_script):
        print(f"[ERROR] PoC script not found at: {poc_script}", file=sys.stderr)
        sys.exit(1)
    try:
        # Execute the PoC script
        result = subprocess.run([poc_script], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(result.stdout)
        if result.stderr:
            print(result.stderr, file=sys.stderr)
    except Exception as e:
        print(f"[ERROR] Failed to execute PoC script: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Remote Controller for CVE-2025-6021: Android SSH LPE PoC")
    parser.add_argument('--target', '-t', type=str, help="Override target host/IP (informational only)")
    args = parser.parse_args()

    config = load_config()
    target = args.target if args.target else config.get("target", "localhost")
    print(f"Target: {target}")
    print("Configuration:")
    print(json.dumps(config, indent=4))

    print("Triggering Android PoC...")
    trigger_poc()

if __name__ == '__main__':
    main()
