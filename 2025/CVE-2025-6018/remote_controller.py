#!/usr/bin/env python3
"""
Remote Controller for CVE PoC client interaction.
This script reads its configuration from config.json and triggers the local PoC.
Designed for fully functional operation in our emulated CTF environment.
"""

import argparse
import json
import os
import subprocess
import sys

def load_config():
    config_path = os.path.join(os.path.dirname(__file__), 'config.json')
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f"[ERROR] Could not load config: {e}", file=sys.stderr)
        sys.exit(1)

def trigger_poc():
    poc_script = os.path.join(os.path.dirname(__file__), 'poc.sh')
    if not os.path.exists(poc_script):
        print(f"[ERROR] PoC script not found at: {poc_script}", file=sys.stderr)
        sys.exit(1)
    try:
        result = subprocess.run([poc_script], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(result.stdout)
        if result.stderr:
            print("PoC script error:", result.stderr, file=sys.stderr)
    except Exception as e:
        print(f"[ERROR] Failed to execute PoC script: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='Remote Controller for CVE PoC')
    parser.add_argument('--target', '-t', type=str, help='Override target host/IP (informational only)')
    args = parser.parse_args()
    
    config = load_config()
    target = args.target if args.target else config.get('target', 'localhost')
    print(f"Target: {target}")
    print("Configuration:")
    print(json.dumps(config, indent=4))
    
    print("Triggering PoC...")
    trigger_poc()

if __name__ == '__main__':
    main()